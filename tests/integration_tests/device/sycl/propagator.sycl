/** Detray library, part of the ACTS project (R&D line)
 *
 * (c) 2023 CERN for the benefit of the ACTS project
 *
 * Mozilla Public License Version 2.0
 */

// Project include(s)
#include "detray/detectors/build_toy_detector.hpp"
#include "propagator_sycl_kernel.hpp"

// Vecmem include(s)
#include <vecmem/memory/host_memory_resource.hpp>
#include <vecmem/memory/sycl/device_memory_resource.hpp>
#include <vecmem/memory/sycl/shared_memory_resource.hpp>
#include <vecmem/utils/sycl/copy.hpp>

// GTest include
#include <gtest/gtest.h>

using namespace detray;

// Simple asynchronous handler function
auto handle_async_error = [](::sycl::exception_list elist) {
    for (auto& e : elist) {
        try {
            std::rethrow_exception(e);
        } catch (::sycl::exception& e) {
            std::cout << "ASYNC EXCEPTION!!\n";
            std::cout << e.what() << "\n";
        }
    }
};
class SyclPropConstBFieldMng : public ::testing::TestWithParam<vector3_t> {};

TEST_P(SyclPropConstBFieldMng, propagator) {

    // Creating SYCL queue object
    ::sycl::queue q(handle_async_error);
    std::cout << "Running constant bfield propagation on device (mng mem): "
              << q.get_device().get_info<::sycl::info::device::name>() << "\n";

    // VecMem memory resource(s)
    vecmem::sycl::shared_memory_resource shared_mr;

    // Set the magnetic field
    const vector3_t B = GetParam();
    auto field = bfield::create_const_field(B);

    // Create the toy geometry
    auto [det, names] = build_toy_detector(shared_mr);

    auto det_view = detray::get_data(det);

    run_propagation_test<bfield::const_bknd_t>(&shared_mr, &q, det, det_view,
                                               field);
}

class SyclPropConstBFieldCpy : public ::testing::TestWithParam<vector3_t> {};

TEST_P(SyclPropConstBFieldCpy, propagator) {

    // Creating SYCL queue object
    ::sycl::queue q(handle_async_error);
    std::cout << "Running constant bfield propagation on device (cpy): "
              << q.get_device().get_info<::sycl::info::device::name>() << "\n";

    // VecMem memory resource(s)
    vecmem::host_memory_resource host_mr;
    vecmem::sycl::shared_memory_resource shared_mr;
    vecmem::sycl::device_memory_resource dev_mr;

    vecmem::sycl::queue_wrapper q_wrapper(&q);
    vecmem::sycl::copy sycl_cpy(q_wrapper);

    // Set the magnetic field
    const vector3_t B = GetParam();
    auto field = bfield::create_const_field(B);

    // Create the toy geometry
    auto [det, names] = build_toy_detector(host_mr);

    auto det_buff = detray::get_buffer(det, dev_mr, sycl_cpy);

    run_propagation_test<bfield::const_bknd_t>(
        &shared_mr, &q, det, detray::get_data(det_buff), field);
}

INSTANTIATE_TEST_SUITE_P(SyclPropagatorValidation1, SyclPropConstBFieldMng,
                         ::testing::Values(vector3_t{0. * unit<scalar_t>::T,
                                                     0. * unit<scalar_t>::T,
                                                     2. * unit<scalar_t>::T}));

INSTANTIATE_TEST_SUITE_P(SyclPropagatorValidation2, SyclPropConstBFieldMng,
                         ::testing::Values(vector3_t{0. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T}));

INSTANTIATE_TEST_SUITE_P(SyclPropagatorValidation3, SyclPropConstBFieldMng,
                         ::testing::Values(vector3_t{1. * unit<scalar_t>::T,
                                                     0. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T}));

INSTANTIATE_TEST_SUITE_P(SyclPropagatorValidation4, SyclPropConstBFieldMng,
                         ::testing::Values(vector3_t{1. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T}));

INSTANTIATE_TEST_SUITE_P(SyclPropagatorValidation5, SyclPropConstBFieldCpy,
                         ::testing::Values(vector3_t{0. * unit<scalar_t>::T,
                                                     0. * unit<scalar_t>::T,
                                                     2. * unit<scalar_t>::T}));

INSTANTIATE_TEST_SUITE_P(SyclPropagatorValidation6, SyclPropConstBFieldCpy,
                         ::testing::Values(vector3_t{0. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T}));

INSTANTIATE_TEST_SUITE_P(SyclPropagatorValidation7, SyclPropConstBFieldCpy,
                         ::testing::Values(vector3_t{1. * unit<scalar_t>::T,
                                                     0. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T}));

INSTANTIATE_TEST_SUITE_P(SyclPropagatorValidation8, SyclPropConstBFieldCpy,
                         ::testing::Values(vector3_t{1. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T,
                                                     1. * unit<scalar_t>::T}));

/// This tests the device propagation in an inhomogenepus magnetic field
/*
TEST(SyclPropagatorValidation10, inhomogeneous_bfield_cpy) {

    // Creating SYCL queue object
    ::sycl::queue q(handle_async_error);
    std::cout << "Running inhom bfield propagation on device (cpy): "
              << q.get_device().get_info<::sycl::info::device::name>() << "\n";

    // VecMem memory resource(s)
    vecmem::host_memory_resource host_mr;
    vecmem::sycl::shared_memory_resource shared_mr;
    vecmem::sycl::device_memory_resource dev_mr;

    vecmem::sycl::copy sycl_cpy;

    // Create the toy geometry with inhomogeneous bfield from file
    auto [det, names] = build_toy_detector<bfield::inhom_bknd_t>(
        shared_mr, toy_cfg);

    auto det_buff = detray::get_buffer<bfield::sycl::inhom_bknd_t>(det, dev_mr,
sycl_cpy);

    run_propagation_test<bfield::sycl::inhom_bknd_t>(&mng_mr, &q, det,
detray::get_data(det_buff));
}*/
