import sys
import numpy as np

import sympy as sym
from sympy import MatrixSymbol

from detray_sympy.common import (
    name_expr,
    find_by_name,
    cxx_printer,
    my_expression_print,
)


def my_covariance_transport_generic_function_print(name_exprs, run_cse=True):
    printer = cxx_printer
    outputs = [find_by_name(name_exprs, name)[0] for name in ["new_C"]]

    lines = []

    head = "template <typename jac_matrix_t, typename cov_matrix_t> DETRAY_HOST_DEVICE void inline transport_covariance_to_bound_impl(const cov_matrix_t& C, const jac_matrix_t& J_full, cov_matrix_t& new_C) {"
    lines.append(head)

    code = my_expression_print(
        printer,
        name_exprs,
        outputs,
        run_cse=run_cse,
    )
    lines.extend([f"  {l}" for l in code.split("\n")])

    lines.append("}")

    return "\n".join(lines)


if __name__ == "__main__":
    output = sys.stdout
    if len(sys.argv) > 1:
        output = open(sys.argv[1], "w")

    C = MatrixSymbol("C", 6, 6).as_explicit().as_mutable()
    """
    for indices in np.ndindex(C.shape):
        C[indices] = C[tuple(sorted(indices))]
    """

    J_full = MatrixSymbol("J_full", 6, 6).as_explicit().as_mutable()
    tmp = sym.eye(6)
    tmp[0:4, 0:5] = J_full[0:4, 0:5]
    tmp[5:6, 0:5] = J_full[5:6, 0:5]
    J_full = tmp

    output.write(
        """/* Detray library, part of the ACTS project (R&D line)
         *
         * (c) 2025 CERN for the benefit of the ACTS project
         *
         * Mozilla Public License Version 2.0
         *
         * Note: This file is automatically generated.
         *       Do not modify it manually.
         */

        #pragma once

        #include "detray/definitions/detail/qualifiers.hpp"
        #include "detray/definitions/algebra.hpp"

        namespace detray::detail {
        """
    )

    all_name_exprs = [name_expr("new_C", J_full * C * J_full.T)]
    code = my_covariance_transport_generic_function_print(
        all_name_exprs,
        run_cse=True,
    )
    output.write(code + "\n")

    output.write("}")

    if output is not sys.stdout:
        output.close()
